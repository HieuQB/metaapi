//Auto generated with MetaApi https://github.com/exyzzy/metaapi
package data

<< .Import >>
<< .ImportTime false >>

//#SPLICE# func {[< template "func" . >]}
//#SPLICE# end


//Create Tables if required
type CreateTableFunc func(*sql.DB) error
type tableFuncs struct {
	TableName  string
	CreateFunc CreateTableFunc
}

var TableNames = []tableFuncs{
<< range $index, $table := .Tables >>
	{"<< $table.PlurName >>", CreateTable<< $table.CapPlurName >>},
<< end >>
}

func CreateTables(db *sql.DB) (err error) {
	for _, t := range TableNames {
		var exists bool
		exists, err = TableExists(db, t.TableName)
		if err != nil {
			return
		}
		if !exists {
			err = t.CreateFunc(db) //CreateTable..
			if err != nil {
				return
			}
		}
	}
	return
}

<< range $index, $table := .Tables >>
//Create Table
func CreateTable<< $table.CapPlurName >>(db *sql.DB) (err error) {
	_, err = db.Exec<< $table.DropTableStatement >>
	if err != nil {
		return
	}
	_, err = db.Exec<< $table.CreateTableStatement >>
	return
}

//Drop Table
func DropTable<< $table.CapPlurName >>(db *sql.DB) (err error) {
	_, err = db.Exec<< $table.DropTableStatement >>
	return
}

//Struct
type << $table.CapSingName >> struct {
<< $table.StructFields >>
//#SPLICE# <<$table.SingName>> {[< block "<<$table.SingName>>" . >]}{[< end >]}
//#SPLICE# end
}

//Create
func (<< $table.SingName >> *<< $table.CapSingName >>) Create<< $table.CapSingName >>(db *sql.DB) (result << $table.CapSingName >>, err error) {
	stmt, err := db.Prepare<< $table.CreateStatement >>
	if err != nil {
		return
	}
	defer stmt.Close()
	err = stmt.QueryRow<< $table.CreateQuery >>
	return
}

//Retrieve
func (<< $table.SingName >> *<< $table.CapSingName >>) Retrieve<< $table.CapSingName >>(db *sql.DB) (result << $table.CapSingName >>, err error) {
	result = << $table.CapSingName >>{}
	err = db.QueryRow<< $table.RetrieveStatement >>
	return
}

//RetrieveAll
func RetrieveAll<< $table.CapPlurName >>(db *sql.DB) (<< $table.PlurName >> []<< $table.CapSingName >>, err error) {
	rows, err := db.Query<< $table.RetrieveAllStatement >>
	if err != nil {
		return
	}
	for rows.Next() {
		result := << $table.CapSingName >>{}
		if err = rows<< $table.ScanAll >>; err != nil {
			return
		}
		<< $table.PlurName >> = append(<< $table.PlurName >>, result)
	}
	rows.Close()
	return
}

//Update
func (<< $table.SingName >> *<< $table.CapSingName >>) Update<< $table.CapSingName >>(db *sql.DB) (result << $table.CapSingName >>, err error) {
	stmt, err := db.Prepare<< $table.UpdateStatement >>
	if err != nil {
		return
	}
	defer stmt.Close()

	err = stmt.QueryRow<< $table.UpdateQuery >>
	return
}

//Delete
func (<< $table.SingName >> *<< $table.CapSingName >>) Delete<< $table.CapSingName >>(db *sql.DB) (err error) {
	stmt, err := db.Prepare<< $table.DeleteStatement >>
	if err != nil {
		return
	}
	defer stmt.Close()

	_, err = stmt.Exec<< $table.DeleteQuery >>
	return
}

//DeleteAll
func DeleteAllBBBBB<< $table.CapPlurName >>(db *sql.DB) (err error) {
	stmt, err := db.Prepare<< $table.DeleteAllStatement>>
	if err != nil {
		return
	}
	defer stmt.Close()

	_, err = stmt.Exec()
	return
}
<< end >>
